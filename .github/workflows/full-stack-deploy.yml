name: Full Stack CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        working-directory: webrtc-share
        run: npm ci

      - name: Run linting
        working-directory: webrtc-share
        run: npm run lint

      - name: Build application
        working-directory: webrtc-share
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        working-directory: backend
        run: npm ci

      - name: Run linting
        working-directory: backend
        run: npm run lint || echo "No lint script found"

      - name: Run tests
        working-directory: backend
        run: npm test || echo "No test script found"

  deploy-frontend:
    needs: test-frontend
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        working-directory: webrtc-share
        run: npm ci

      - name: Build for production
        working-directory: webrtc-share
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        run: npm run build

      - name: Create deployment package (staged & stable)
        run: |
          set -e
          rm -rf /tmp/frontend_stage
          mkdir -p /tmp/frontend_stage
          rsync -a --delete \
            --include='.next/***' \
            --include='public/***' \
            --include='package.json' \
            --include='package-lock.json' \
            --include='next.config.*' \
            --include='postcss.config.*' \
            --exclude='*' \
            webrtc-share/ /tmp/frontend_stage/
          tar -czf frontend-deploy.tar.gz -C /tmp frontend_stage

      - name: Deploy to Hostinger VPS (prep)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            set -e
            stamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p ~/webrtc-main/webrtc-share ~/backups/$stamp
            if [ -d ~/webrtc-main/webrtc-share ]; then
              cp -r ~/webrtc-main/webrtc-share ~/backups/$stamp/ || true
            fi
            # Stop process if running
            if pm2 list | grep -q "webrtc-frontend"; then
              pm2 stop webrtc-frontend || true
              pm2 delete webrtc-frontend || true
            fi
            # Clean (keep .env.local)
            cd ~/webrtc-main/webrtc-share
            find . -maxdepth 1 ! -name '.env.local' ! -name '.' ! -name '..' -exec rm -rf {} +

      - name: Upload package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          source: "frontend-deploy.tar.gz"
          target: "~/webrtc-main/"

      - name: Start frontend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            set -e
            cd ~/webrtc-main/webrtc-share
            tar -xzf ../frontend-deploy.tar.gz --strip-components=1 -C .
            rm -f ../frontend-deploy.tar.gz
            npm ci --omit=dev
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
            pm2 start npm --name "webrtc-frontend" -- start
            pm2 save
            pm2 startup || true
            # keep last 5 backups
            cd ~/backups && ls -t | tail -n +6 | xargs -r rm -rf
            echo "Frontend deployment completed successfully!"

  deploy-backend:
    needs: test-backend
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies (to validate lock)
        working-directory: backend
        run: npm ci

      - name: Create deployment package (tracked files only)
        run: |
          # safer than tar over a live dir
          git archive --format=tar --prefix=backend/ HEAD:backend | gzip > backend-deploy.tar.gz
          ls -lh backend-deploy.tar.gz

      - name: Deploy to Hostinger VPS (prep)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            set -e
            stamp=$(date +%Y%m%d_%H%M%S)
            mkdir -p ~/webrtc-main/backend ~/backups/$stamp
            if [ -d ~/webrtc-main/backend ]; then
              cp -r ~/webrtc-main/backend ~/backups/$stamp/ || true
            fi
            if pm2 list | grep -q "webrtc-backend"; then
              pm2 stop webrtc-backend || true
              pm2 delete webrtc-backend || true
            fi

      - name: Upload package
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          source: "backend-deploy.tar.gz"
          target: "~/webrtc-main/"

      - name: Start backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          key: ${{ secrets.HOSTINGER_SSH_KEY }}
          port: ${{ secrets.HOSTINGER_PORT }}
          script: |
            set -e
            cd ~/webrtc-main
            # preserve .env if present
            if [ -f backend/.env ]; then cp backend/.env /tmp/backend.env; fi
            rm -rf backend
            tar -xzf backend-deploy.tar.gz
            rm -f backend-deploy.tar.gz
            if [ -f /tmp/backend.env ]; then mv /tmp/backend.env backend/.env; fi
            cd backend
            npm ci --omit=dev
            command -v pm2 >/dev/null 2>&1 || npm i -g pm2
            pm2 start index.js --name "webrtc-backend" --max-memory-restart 512M
            pm2 save
            pm2 startup || true
            cd ~/backups && ls -t | tail -n +6 | xargs -r rm -rf
            echo "Backend deployment completed successfully!"
