name: Frontend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: webrtc-share/package-lock.json
    
    - name: Install dependencies
      run: |
        cd webrtc-share
        npm ci
    
    - name: Run linting
      run: |
        cd webrtc-share
        npm run lint
    
    - name: Build application
      run: |
        cd webrtc-share
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: webrtc-share/package-lock.json
    
    - name: Install dependencies
      run: |
        cd webrtc-share
        npm ci
    
    - name: Build for production
      run: |
        cd webrtc-share
        npm run build
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
    
    - name: Create deployment package
      run: |
        cd webrtc-share
        tar -czf ../frontend-deploy.tar.gz \
          .next \
          public \
          package.json \
          package-lock.json \
          next.config.mjs \
          postcss.config.mjs
        cd ..
    
    - name: Deploy to Hostinger VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        key: ${{ secrets.HOSTINGER_SSH_KEY }}
        port: ${{ secrets.HOSTINGER_PORT || 22 }}
        script: |
          # Create backup directory
          mkdir -p ~/backups/$(date +%Y%m%d_%H%M%S)
          
          # Backup current version
          if [ -d ~/webrtc-main/webrtc-share ]; then
            cp -r ~/webrtc-main/webrtc-share ~/backups/$(date +%Y%m%d_%H%M%S)/
          fi
          
          # Use existing webrtc-main directory
          cd ~/webrtc-main/webrtc-share
          
          # Stop current process if running
          if pm2 list | grep -q "webrtc-frontend"; then
            pm2 stop webrtc-frontend
            pm2 delete webrtc-frontend
          fi
          
          # Clean up old files (but keep .env.local)
          find . -maxdepth 1 ! -name '.env.local' ! -name '.' ! -name '..' -exec rm -rf {} +
    
    - name: Upload and extract deployment package
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        key: ${{ secrets.HOSTINGER_SSH_KEY }}
        port: ${{ secrets.HOSTINGER_PORT || 22 }}
        source: "frontend-deploy.tar.gz"
        target: "~/webrtc-main/"
    
    - name: Setup and start application
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOSTINGER_HOST }}
        username: ${{ secrets.HOSTINGER_USERNAME }}
        key: ${{ secrets.HOSTINGER_SSH_KEY }}
        port: ${{ secrets.HOSTINGER_PORT || 22 }}
        script: |
          cd ~/webrtc-main/webrtc-share
          
          # Extract deployment package
          tar -xzf frontend-deploy.tar.gz
          rm frontend-deploy.tar.gz
          
          # Install production dependencies
          npm ci --production
          
          # Keep existing .env.local file (don't overwrite)
          echo "âœ… Keeping existing .env.local file unchanged"
          
          # Start application with PM2
          pm2 start npm --name "webrtc-frontend" -- start
          pm2 save
          pm2 startup
          
          # Clean up old backups (keep last 5)
          cd ~/backups
          ls -t | tail -n +6 | xargs -r rm -rf
          
          echo "Frontend deployment completed successfully!"
